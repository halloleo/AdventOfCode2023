-- Advent of code 2023 Day 9 in Frege

debug :: String -> a -> a
debug msg f = if trace msg then f else f

diffList :: [Int] -> [Int]
diffList vals =  
  map diffs $ zip nextvals vals
  where
    diffs = \(x, y) -> x - y
    nextvals = tail vals


--- | predictList the final value of this row and return the complete list
predictList :: [Int] -> [Int]
predictList vals = 
  if all (==0) vals then
    vals ++ [0]
  else
    vals ++ [last vals + last nextrowextended]
  where
    --nextrowextended' = debug (show (last nextrowextended) ++ "\n") nextrowextended
    nextrowextended = predictList nextrow
    nextrow = diffList vals

readNumList :: String -> [Int]
readNumList line = 
  -- map read (id $ words line) -- for challenge 1
  map read (reverse $ words line) -- for challenge 2

predictionFromLine :: String -> Int
predictionFromLine line =
  last $ predictList $ readNumList line

sumAllLines :: [String] -> Int
sumAllLines llst =
  sum $ map predictionFromLine llst

in2out :: String -> String
in2out s = 
  show (sumAllLines $ lines s)

main = interact in2out
